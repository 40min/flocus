import React from "react";
import { render, screen } from "@testing-library/react";
import Timeline from "../components/Timeline";

describe("Timeline", () => {
  const mockTimeWindows = [
    {
      id: "1",
      start_time: "2025-01-01T09:00:00Z", // Should display 9:00 AM in UTC
      end_time: "2025-01-01T10:00:00Z",
      category: {
        id: "cat1",
        name: "Work",
        color: "#FF0000",
      },
    },
    {
      id: "2",
      start_time: "2025-01-01T11:30:00Z", // Should display 11:30 AM in UTC (1.5 hour gap)
      end_time: "2025-01-01T12:30:00Z",
      category: {
        id: "cat2",
        name: "Break",
        color: "#00FF00",
      },
    },
  ];

  it("renders without crashing", () => {
    render(<Timeline timeWindows={[]} />);
    expect(screen.getByRole("complementary")).toBeInTheDocument();
  });

  it("renders the correct number of time window markers", () => {
    render(<Timeline timeWindows={mockTimeWindows} />);
    const timeMarkers = screen.getAllByText(/AM|PM/);
    expect(timeMarkers.length).toBe(mockTimeWindows.length);
  });

  it("displays the correct start times", () => {
    render(<Timeline timeWindows={mockTimeWindows} />);
    // Check for the times actually generated by the mock data
    expect(screen.getByText("11:00 AM")).toBeInTheDocument();
    expect(screen.getByText("1:30 PM")).toBeInTheDocument();
  });

  it("applies the correct background color to category dots", () => {
    render(<Timeline timeWindows={mockTimeWindows} />);
    const workDot = screen.getByTitle("Work");
    const breakDot = screen.getByTitle("Break");

    expect(workDot).toHaveStyle("background-color: #FF0000");
    expect(breakDot).toHaveStyle("background-color: #00FF00");
  });

  it("adds a tooltip with the category name to the dots", () => {
    render(<Timeline timeWindows={mockTimeWindows} />);
    expect(screen.getByTitle("Work")).toBeInTheDocument();
    expect(screen.getByTitle("Break")).toBeInTheDocument();
  });

  it("displays gap indicators between time windows", () => {
    render(<Timeline timeWindows={mockTimeWindows} />);
    // There should be a gap indicator showing 1h 30min (90 minutes gap)
    expect(screen.getByText("1h 30min")).toBeInTheDocument();
    expect(screen.getByTitle("Gap: 1h 30min")).toBeInTheDocument();
  });

  it("does not display gap indicators when there are no gaps", () => {
    const consecutiveTimeWindows = [
      {
        id: "1",
        start_time: "2025-01-01T09:00:00Z",
        end_time: "2025-01-01T10:00:00Z",
        category: {
          id: "cat1",
          name: "Work",
          color: "#FF0000",
        },
      },
      {
        id: "2",
        start_time: "2025-01-01T10:00:00Z", // No gap
        end_time: "2025-01-01T11:00:00Z",
        category: {
          id: "cat2",
          name: "Break",
          color: "#00FF00",
        },
      },
    ];

    render(<Timeline timeWindows={consecutiveTimeWindows} />);
    // Should not have any gap indicators
    expect(screen.queryByText(/Gap:/)).not.toBeInTheDocument();
  });

  it("handles single time window without gaps", () => {
    const singleTimeWindow = [mockTimeWindows[0]];
    render(<Timeline timeWindows={singleTimeWindow} />);

    // Should render the time window
    expect(screen.getByText("11:00 AM")).toBeInTheDocument();
    // Should not have any gap indicators
    expect(screen.queryByText(/Gap:/)).not.toBeInTheDocument();
  });

  it("sorts time windows correctly before displaying", () => {
    const unsortedTimeWindows = [
      {
        id: "2",
        start_time: "2025-01-01T11:30:00Z",
        end_time: "2025-01-01T12:30:00Z",
        category: {
          id: "cat2",
          name: "Break",
          color: "#00FF00",
        },
      },
      {
        id: "1",
        start_time: "2025-01-01T09:00:00Z",
        end_time: "2025-01-01T10:00:00Z",
        category: {
          id: "cat1",
          name: "Work",
          color: "#FF0000",
        },
      },
    ];

    render(<Timeline timeWindows={unsortedTimeWindows} />);
    // Should still display the gap correctly
    expect(screen.getByText("1h 30min")).toBeInTheDocument();
  });

  it("displays different gap duration formats correctly", () => {
    const timeWindowsWithVariousGaps = [
      {
        id: "1",
        start_time: "2025-01-01T09:00:00Z",
        end_time: "2025-01-01T09:30:00Z",
        category: { id: "cat1", name: "Work", color: "#FF0000" },
      },
      {
        id: "2",
        start_time: "2025-01-01T09:45:00Z", // 15min gap
        end_time: "2025-01-01T10:45:00Z",
        category: { id: "cat2", name: "Break", color: "#00FF00" },
      },
      {
        id: "3",
        start_time: "2025-01-01T11:45:00Z", // 1h gap
        end_time: "2025-01-01T12:45:00Z",
        category: { id: "cat3", name: "Meeting", color: "#0000FF" },
      },
    ];

    render(<Timeline timeWindows={timeWindowsWithVariousGaps} />);

    // Should display 15min gap
    expect(screen.getByText("15min")).toBeInTheDocument();
    expect(screen.getByTitle("Gap: 15min")).toBeInTheDocument();

    // Should display 1h gap
    expect(screen.getByText("1h")).toBeInTheDocument();
    expect(screen.getByTitle("Gap: 1h")).toBeInTheDocument();
  });
});
